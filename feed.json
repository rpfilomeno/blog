{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ai.to.mations",
    "description": "",
    "home_page_url": "https://roger.rogverse.fyi",
    "feed_url": "https://roger.rogverse.fyi/feed.json",
    "user_comment": "",
    "author": {
        "name": "Roger Filomeno"
    },
    "items": [
        {
            "id": "https://roger.rogverse.fyi/crystalwire-10-release.html",
            "url": "https://roger.rogverse.fyi/crystalwire-10-release.html",
            "title": "Crystalwire 1.0 Release",
            "summary": "When you don't care about the firewall but need the jumping graphs that track which process consumes all your bandwidth, it's like Glasswire for terminals! Crystalwire is a command-line tool that monitors network bandwidth usage for each running process in real-time. It utilizes the psutil&hellip;",
            "content_html": "\n  <p>\n    When you don't care about the firewall but need the jumping graphs that track which process consumes all your bandwidth, it's like Glasswire for terminals!\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://roger.rogverse.fyi/media/posts/4/image-2.png\" height=\"583\" width=\"817\" alt=\"\"  sizes=\"(min-width: 1500px) calc(7.87vw + 610px), (min-width: 900px) calc(44.48vw + 68px), (min-width: 780px) calc(8vw + 604px), calc(84.35vw + 23px)\" srcset=\"https://roger.rogverse.fyi/media/posts/4/responsive/image-2-xs.webp 300w ,https://roger.rogverse.fyi/media/posts/4/responsive/image-2-sm.webp 480w ,https://roger.rogverse.fyi/media/posts/4/responsive/image-2-md.webp 768w\">\n      \n    </figure>\n\n  <p>\n    Crystalwire is a command-line tool that monitors network bandwidth usage for each running process in real-time. It utilizes the psutil library for gathering system information and displays the data in a user-friendly format.<br>\n  </p>\n\n    <h2 id=\"installation\">\n      Installation\n    </h2>\n\n  <p>\n    1. Clone the project\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>gh repo clone rpfilomeno/crystalwire</code></pre>\n\n  <p>\n    2. install 'crystalwire' the dependencies\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>pip install -r requirements.txt</code></pre>\n\n    <h2 id=\"usage\">\n      Usage\n    </h2>\n\n  <p>\n    Once installed, you can run 'crystalwire' from the command line:\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>python -m crystalwire.main</code></pre>\n\n  <p>\n    \n  </p>",
            "image": "https://roger.rogverse.fyi/media/posts/4/Python-logo-notext.svg.png",
            "author": {
                "name": "Roger Filomeno"
            },
            "tags": [
                   "python",
                   "network",
                   "monitoring",
                   "blog"
            ],
            "date_published": "2025-03-22T22:54:21+08:00",
            "date_modified": "2025-03-22T23:17:46+08:00"
        },
        {
            "id": "https://roger.rogverse.fyi/monitoring-kamailio-and-asterisk-with-aws-cloudwatch.html",
            "url": "https://roger.rogverse.fyi/monitoring-kamailio-and-asterisk-with-aws-cloudwatch.html",
            "title": "Monitoring Kamailio and Asterisk with AWS CloudWatch",
            "summary": "Today I'm announcing the release to my new project VOIP Statistics to AWS CloudWatch (voip-mon-aws-cloudwatch), it is a monitoring script for Kamailio and Asterisk for AWS CloudWatch written in PHP. This works similarly to AWS CloudWatch Monitoring Script (Linux). Requirements Installation 1. Git clone to&hellip;",
            "content_html": "\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://roger.rogverse.fyi/media/posts/3/voip-aws-mon-2.jpg\" height=\"647\" width=\"1373\" alt=\"\"  sizes=\"(min-width: 1500px) calc(7.87vw + 610px), (min-width: 900px) calc(44.48vw + 68px), (min-width: 780px) calc(8vw + 604px), calc(84.35vw + 23px)\" srcset=\"https://roger.rogverse.fyi/media/posts/3/responsive/voip-aws-mon-2-xs.webp 300w ,https://roger.rogverse.fyi/media/posts/3/responsive/voip-aws-mon-2-sm.webp 480w ,https://roger.rogverse.fyi/media/posts/3/responsive/voip-aws-mon-2-md.webp 768w\">\n      \n    </figure>\n\n  <p>\n    Today I'm announcing the release to my new project <a href=\"https://github.com/rpfilomeno/voip-mon-aws-cloudwatch\">VOIP Statistics to AWS CloudWatch (voip-mon-aws-cloudwatch)</a>, it is a monitoring script for Kamailio and Asterisk for AWS CloudWatch written in PHP. <br>\n  </p>\n\n  <p>\n    This works similarly to AWS CloudWatch Monitoring Script (Linux).<br><br>Requirements<br>\n  </p>\n\n  <ul>\n    <li>PHP 5.5 and above</li><li>Composer</li><li>Asterisk</li><li>Kamailio</li>\n  </ul>\n\n  <p>\n    Installation<br><br>1. Git clone to any Linux instance with Kamailio or Asterisk installed,<br><br>for example to ~/home/ec2-user/ using&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>git clone https://github.com/rpfilomeno/voip-mon-aws-cloudwatch.git</code></pre>\n\n  <p>\n    2. Go to the project's root directory by\n  </p>\n<pre class=\"line-numbers  language-html\"><code>cd ./voip-mon-aws-cloudwatch/</code></pre>\n\n  <p>\n    \n  </p>\n\n  <p>\n    3. Make the mon-put-instance-data.php executable\n  </p>\n<pre class=\"line-numbers  language-html\"><code>sudo chmod +x mon-put-instance-data.php</code></pre>\n\n  <p>\n    4. Install Composer\n  </p>\n<pre class=\"line-numbers  language-html\"><code>curl -sS https://getcomposer.org/installer | php</code></pre>\n\n  <p>\n    5. Install the dependencies by\n  </p>\n<pre class=\"line-numbers  language-html\"><code>php composer.phar update</code></pre>\n\n  <p>\n    6. Create your AWS&nbsp;<a href=\"http://docs.aws.amazon.com/aws-sdk-php/v3/guide/guide/credentials.html#credential-profiles\" target=\"_blank\">credentials file</a>\n  </p>\n\n    <h2 id=\"monitoring-kamailio\">\n      Monitoring Kamailio\n    </h2>\n\n  <p>\n    1. Test the script for monitoring Kamailio with\n  </p>\n<div>./mon-put-instance-data.php stats --t kamailio</div>\n\n  <p>\n    2. Install to Crontab with\n  </p>\n<div>crontab -e\n*/5 * * * * php /home/ec2-user/voip-mon-aws-cloudwatch/mon-put-instance-data.php stats --s kamailio</div>\n\n    <h2 id=\"monitoring-asterisk\">\n      Monitoring Asterisk\n    </h2>\n\n  <p>\n    1. Test the script for monitoring Kamailio with\n  </p>\n<div>./mon-put-instance-data.php stats --t asterisk\n</div>\n\n  <p>\n    2. Install to Crontab with\n  </p>\n<div>crontab -e\n*/5 * * * * php /home/ec2-user/voip-mon-aws-cloudwatch/mon-put-instance-data.php stats --s asterisk</div>",
            "image": "https://roger.rogverse.fyi/media/posts/3/images-1.png",
            "author": {
                "name": "Roger Filomeno"
            },
            "tags": [
                   "voip",
                   "blog",
                   "aws"
            ],
            "date_published": "2025-03-22T22:42:13+08:00",
            "date_modified": "2025-03-22T23:18:07+08:00"
        },
        {
            "id": "https://roger.rogverse.fyi/testing-kamailio-load-balancer-with-sipp.html",
            "url": "https://roger.rogverse.fyi/testing-kamailio-load-balancer-with-sipp.html",
            "title": "Testing Kamailio load balancer with SIPp",
            "summary": "Here are the steps to test Kamailio under load. First of all lets describe our network setup: The a user from extension 300X registered to Asterisk 1 initiates a call to an extension 400X registered at Asterisk 2. Kamailio is registered as a trunk to&hellip;",
            "content_html": "<p>Here are the steps to test Kamailio under load.</p><p>First of all lets describe our network setup:</p><script src=\"https://gist.github.com/rpfilomeno/d46493eefaf70d6838c157305ab9778a.js\"></script>\n\n<p>The a user from extension <em>300X</em> registered to <em>Asterisk 1</em> initiates a call to an extension <em>400X</em> registered at <em>Asterisk 2</em>. <em>Kamailio</em> is registered as a <em>trunk</em> to both Asterisk 1 &amp; 2; which intercepts the call which load balances it to either <em>Asterisk X or Y</em> where they do some <em>fancy</em> pre-processing to current call before its received by the callee.</p><p>Now for our testing purposes, we needed to remove the effect on performance by Asterisk 1 &amp; 2 so we installed SIPp on another host which generates calls and receives them.</p><h3 id=\"installation-and-execution-steps\">Installation and Execution Steps</h3>\n<ol>\n<li>Download and Modify SIPp to auto respond always and include OPTIONS packet as well (-aa broken?), edit src/call.cpp:</li>\n</ol>\n<pre><code class=\"language-cpp\">call::T_AutoMode call::checkAutomaticResponseMode(char * P_recv)\n{\n    if (strcmp(P_recv, &quot;BYE&quot;)==0) {\n        return E_AM_UNEXP_BYE;\n    } else if (strcmp(P_recv, &quot;CANCEL&quot;) == 0) {\n        return E_AM_UNEXP_CANCEL;\n    } else if (strcmp(P_recv, &quot;PING&quot;) == 0) {\n        return E_AM_PING;\n    } else if ((strcmp(P_recv, &quot;INFO&quot;) == 0) || (strcmp(P_recv, &quot;NOTIFY&quot;) == 0) || (strcmp(P_recv, &quot;UPDATE&quot;) == 0) || (strcmp(P_recv, &quot;OPTIONS&quot;) == 0)\n               ) {\n        return E_AM_AA;\n    } else {\n        return E_AM_DEFAULT;\n    }\n}\n</code></pre>\n<p>Compile <em>sipp-3.3.990</em> with <a href=\"http://sipp.sourceforge.net/doc/reference.html#Installing+SIPp\">RTP Support</a>.</p><p>To run the test, from SIPp Box: </p><pre><code class=\"language-bash\"># sipp 10.254.1.30 -i 10.254.1.40 -sf uac.xml -aa -inf accounts.csv -l 10000 -r 1 -rp 1000 -trace_msg -trace_err -trace_stat\n</code></pre>\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Parameter</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>10.254.1.30</td>\n      <td>target Kamailio's IP on the LAN A side (see network diagram)</td>\n    </tr>\n    <tr>\n      <td>-i 10.254.1.40</td>\n      <td>make sure to bind SIPp on this IP especially if we are using IP Authentication on Kamailio</td>\n    </tr>\n    <tr>\n      <td>-sf <a href=\"https://gist.github.com/rpfilomeno/7445a628a3cbc0ceaaf8e9afe182578b#file-uac-xml\">uac.xml</a></td>\n      <td>use this scenario file that generates calls.</td>\n    </tr>\n    <tr>\n      <td>-inf <a href=\"https://gist.github.com/rpfilomeno/8673ee9dc7355274dfd98d187bbde925#file-accounts-csv\">accounts.csv</a></td>\n      <td>use this input CSV file, this is where the <em>[field0]</em>,<em>[field1]</em>,<em>[field2]</em> and <em>[field3]</em> values are derived in uac.xml. <br>Edit this file accordingly in format: \n        <em>\n        CallID;Kamailio LAN A IP;[authentication];Extension on Asterisk 2;Asterisk 2 LAN B IP;\n        </em>\n    </td>\n    </tr>\n    <tr>\n      <td>-l 10000</td>\n      <td>run 1000 calls.</td>\n    </tr>\n    <tr>\n      <td>-r 1 -rp 1000</td>\n      <td>make one call per 1000ms (1 secs)</td>\n    </tr>\n    <tr>\n      <td>-trace_msg</td>\n      <td>log all messages to a file (filename auto generated)</td>\n    </tr>\n    <tr>\n      <td>-trace_err</td>\n      <td>log all errors to a separate file (filename auto generated)</td>\n    </tr>\n    <tr>\n      <td>-trace_stat</td>\n      <td>generate a CSV file with statistics which is good for making graphs (default 1 minute interval) </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<p>Make sure to edit the accounts.csv, change 10.254.1.30 and 10.254.7.31 accordingly.</p><p>Make sure to edit the uac.xml, change Route:</p><pre><code>&lt;sip:10.254.1.30;r2=on;lr=on;nat=yes&gt;,&lt;sip:10.254.3.30;r2=on;lr=on;nat=yes&gt;```\naccordingly since sipp-3.3.990 can&#39;t reliably generate this header so we had to hard code this for now. \n\nYou may run a SIPp on Asterisk 2 box to test higher concurrent calls (eg: testing more than 200 concurrent calls).\n\nLets shutdown Asterisk 1 &amp; 2: \n```bash\n# asterisk -rx &quot;core stop now&quot;\n</code></pre>\n<p>To run a server listening to incoming calls (server mode), run:</p><pre><code class=\"language-bash\"># sipp 10.254.7.30 -i 10.254.7.31 -sf uas.xml -aa -trace_msg -trace_err -trace_stat\n</code></pre>\n<p>Makes sure to edit the <a href=\"https://gist.github.com/rpfilomeno/5827e6ecf5863f74f53d41b1e15fa707#file-uas-xml\">uas.xml</a> to include the IP routes.</p><p>Now lets see how effective is Kamailio in this setup, here are the results I had:</p><table class=\"table\">\n  <thead>\n    <tr>\n      <th>Test Name</th>\n      <th>Concurrent Calls</th>\n      <th>Success</th>\n      <th>Failed</th>\n      <th>Dead Calls</th>\n      <th>Retransmissions</th>\n      <th>Average Response Time</th>\n      <th>Average Call Rate Per Seconds</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Test1</td>\n      <td>200</td>\n      <td>1000</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2.52747</td>\n      <td>03.615000</td>\n    </tr>\n    <tr>\n      <td>Test2</td>\n      <td>300</td>\n      <td>998</td>\n      <td>2</td>\n      <td>5</td>\n      <td>252</td>\n      <td>3.15839</td>\n      <td>04.550000</td>\n    </tr>\n    <tr>\n      <td>Test3</td>\n      <td>400</td>\n      <td>993</td>\n      <td>7</td>\n      <td>12</td>\n      <td>1355</td>\n      <td>3.61512</td>\n      <td>13.049000</td>\n    </tr>\n    <tr>\n      <td>Test4</td>\n      <td>600</td>\n      <td>831</td>\n      <td>169</td>\n      <td>127</td>\n      <td>3554</td>\n      <td>4.05337</td>\n      <td>13.04900</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>We stop at <em>Test 4</em> seeing Failed Calls spiked up at 169 calls, this was significant from our base capacity of 50 concurrent calls already.</p><p>Many thanks to <a href=\"http://saevolgo.blogspot.com/\">Gohar Ahmed</a> for helping me figuring most of the bugs.</p>",
            "image": "https://roger.rogverse.fyi/media/posts/2/5348744.png",
            "author": {
                "name": "Roger Filomeno"
            },
            "tags": [
                   "voip",
                   "testing",
                   "blog"
            ],
            "date_published": "2025-03-22T22:11:12+08:00",
            "date_modified": "2025-03-22T23:18:22+08:00"
        }
    ]
}
